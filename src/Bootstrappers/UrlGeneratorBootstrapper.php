<?php

declare(strict_types=1);

namespace Stancl\Tenancy\Bootstrappers;

use Illuminate\Contracts\Foundation\Application;
use Illuminate\Routing\UrlGenerator;
use Illuminate\Support\Facades\URL;
use Stancl\Tenancy\Contracts\TenancyBootstrapper;
use Stancl\Tenancy\Contracts\Tenant;
use Stancl\Tenancy\Overrides\TenancyUrlGenerator;

/**
 * Makes the app use TenancyUrlGenerator (instead of Illuminate\Routing\UrlGenerator) which:
 * - prefixes route names with the tenant route name prefix (PathTenantResolver::tenantRouteNamePrefix() by default)
 * - passes the tenant parameter to the link generated by route() and temporarySignedRoute() (PathTenantResolver::tenantParameterName() by default).
 *
 * Used with path and query string identification.
 *
 * @see TenancyUrlGenerator
 * @see \Stancl\Tenancy\Resolvers\PathTenantResolver
 */
class UrlGeneratorBootstrapper implements TenancyBootstrapper
{
    public function __construct(
        protected Application $app,
        protected UrlGenerator $originalUrlGenerator,
    ) {
    }

    public function bootstrap(Tenant $tenant): void
    {
        URL::clearResolvedInstances();

        $this->useTenancyUrlGenerator();
    }

    public function revert(): void
    {
        $this->app->bind('url', fn () => $this->originalUrlGenerator);
    }

    /**
     * Make 'url' resolve to an instance of TenancyUrlGenerator.
     *
     * @see \Illuminate\Routing\RoutingServiceProvider registerUrlGenerator()
     */
    protected function useTenancyUrlGenerator(): void
    {
        $this->app->extend('url', function (UrlGenerator $urlGenerator, Application $app) {
            $newGenerator = new TenancyUrlGenerator(
                $app['router']->getRoutes(),
                $urlGenerator->getRequest(),
                $app['config']->get('app.asset_url'),
            );

            $newGenerator->defaults($urlGenerator->getDefaultParameters());

            $newGenerator->setSessionResolver(function () {
                return $this->app['session'] ?? null;
            });

            $newGenerator->setKeyResolver(function () {
                return $this->app->make('config')->get('app.key');
            });

            return $newGenerator;
        });
    }
}
